---
title: "Regressão linear CD"
lang: pt
execute:
  warning: false
  freeze: true  # never re-render during project render #  freeze: auto  # re-render only when source changes
  cache: true 
---

## Carregando dataset

```{r}
if(!require('caret')) {install.packages('caret', repos='http://cran-r.c3sl.ufpr.br/')}
library(caret)

if(!require('knitr')) {install.packages('knitr', repos='http://cran-r.c3sl.ufpr.br/')}
library(knitr)
datasetfull<-readRDS("../rds/datasetfull_regras_rpart.rds")
datasetfull <- datasetfull[, c("declividade_cd_aptidao"
                                  ,"def_hid_cd_aptidao"
                                  ,"dist_sede_municipal_cd_aptidao"
                                  ,"dist_vias_municipais_cd_aptidao"
                                  ,"drenagem_cd_aptidao"
                                  ,"erodibilidade_cd_aptidao"
                                  ,"pluviosidade_cd_aptidao"
                                  ,"temperatura_cd_aptidao"
                                  ,"textura_cd_aptidao"
                                  ,"umidade_cd_aptidao"
                                  ,"uso_cd_aptidao"
                                  ,"aptidao"
                                  )]
kable(head(datasetfull))
```



## Regressão linear

```{r}
#| tbl-cap: "Pesos associados a cada variável"

modelo <- lm(aptidao ~ declividade_cd_aptidao + def_hid_cd_aptidao + dist_sede_municipal_cd_aptidao + dist_vias_municipais_cd_aptidao + drenagem_cd_aptidao + erodibilidade_cd_aptidao + pluviosidade_cd_aptidao + temperatura_cd_aptidao + textura_cd_aptidao + umidade_cd_aptidao + uso_cd_aptidao, data = datasetfull)

kable(modelo$coefficients)
```

## Calcule o R-quadrado

O R-quadrado mede a proporção da variabilidade na variável de resposta que é explicada pelo modelo. Um valor mais próximo de 1 indica um bom ajuste.
```{r}
#| tbl-cap: "R-quadrado"

r_squared <- summary(modelo)$r.squared
cat("R-squared:", r_squared, "\n")
```

## Erro Quadrático Médio (MSE):

O MSE mede a média dos erros quadrados entre os valores reais e previstos. Um MSE menor indica um modelo mais preciso.

```{r}
#| tbl-cap: "MSE"
# Calcule o MSE
predicted_values <- predict(modelo)
# Defina as faixas desejadas
#faixas <- c(0, 1.49, 2.49, 3.50, Inf)
# Use a função cut() para categorizar os valores nas faixas
#predicted_values <- cut(predicted_values, breaks = faixas, labels = c(1, 2, 3, 4))
mse <- mean((datasetfull$aptidao - as.numeric(predicted_values))^2)
cat("MSE:", mse, "\n")
```


## Formula
```{r}
dados <- data.frame(
    previsoes =  datasetfull$declividade_cd_aptidao*coef(modelo)["declividade_cd_aptidao"]+
    datasetfull$def_hid_cd_aptidao*coef(modelo)["def_hid_cd_aptidao"]+
    datasetfull$dist_sede_municipal_cd_aptidao*coef(modelo)["dist_sede_municipal_cd_aptidao"]+
    datasetfull$dist_vias_municipais_cd_aptidao*coef(modelo)["dist_vias_municipais_cd_aptidao"]+
    datasetfull$drenagem_cd_aptidao*coef(modelo)["drenagem_cd_aptidao"]+
    datasetfull$erodibilidade_cd_aptidao*coef(modelo)["erodibilidade_cd_aptidao"]+
    datasetfull$pluviosidade_cd_aptidao*coef(modelo)["pluviosidade_cd_aptidao"]+
    datasetfull$temperatura_cd_aptidao*coef(modelo)["temperatura_cd_aptidao"]+
    datasetfull$textura_cd_aptidao*coef(modelo)["textura_cd_aptidao"]+
    datasetfull$umidade_cd_aptidao*coef(modelo)["umidade_cd_aptidao"]+
    datasetfull$uso_cd_aptidao*coef(modelo)["uso_cd_aptidao"]+    
    coef(modelo)["(Intercept)"]
)

#clusters <- kmeans(dados$previsoes, centers = 4)
#dados$previsoes <- clusters$cluster

# Defina as faixas desejadas
faixas <- c(0, 1.2, 2.3, 3.3, Inf)
# Use a função cut() para categorizar os valores nas faixas
dados$previsoes <- cut(dados$previsoes, breaks = faixas, labels = c(1, 2, 3, 4))

```


## Calculando matriz de confusão
```{r}
#| label: tbl-matriz-confusao
#| tbl-cap: "Matriz de confusão"
conf_matrix <- confusionMatrix(factor(dados$previsoes), factor(datasetfull$aptidao))
#conf_matrix <- confusionMatrix(factor(predicted_values), factor(datasetfull$aptidao))
#head((predicted_values+coef(modelo)["(Intercept)"]))

#head(dados$previsoes)

#head(datasetfull$aptidao)


kable(conf_matrix$table)
```

## Obtenha a precisão global

```{r}
accuracy <- conf_matrix$overall["Accuracy"]
cat("Precisão Global:", accuracy, "\n")
```

## Obtenha o índice kappa

```{r}
kappa <- conf_matrix$overall["Kappa"]
cat("Índice Kappa:", kappa, "\n")
```


<!--



O "Intercept" (intercepto), também conhecido como coeficiente de interceptação ou coeficiente linear, é um dos coeficientes resultantes de uma análise de regressão linear. Ele representa o valor estimado da variável dependente (variável de resposta) quando todas as variáveis independentes (variáveis preditoras) são iguais a zero.

Em uma equação de regressão linear simples, que envolve apenas uma variável independente, a equação pode ser escrita como:

\[Y = \beta_0 + \beta_1X\]

- \(Y\) é a variável dependente (a variável que você está tentando prever).
- \(\beta_0\) é o Intercept (coeficiente de interceptação), que representa o valor estimado de \(Y\) quando \(X\) é igual a zero. É o ponto onde a reta da regressão cruza o eixo vertical (eixo \(Y\)).
- \(\beta_1\) é o coeficiente da variável independente \(X\), que representa a mudança estimada em \(Y\) para uma unidade de mudança em \(X\).

O Intercept (\(\beta_0\)) é importante porque ele determina o ponto onde a reta de regressão começa, mesmo que os valores de \(X\) não sejam iguais a zero em seu conjunto de dados. Em uma regressão múltipla com várias variáveis independentes, o Intercept (\(\beta_0\)) ainda representa o valor estimado de \(Y\) quando todas as variáveis independentes são iguais a zero, embora as situações em que todas as variáveis são iguais a zero possam não ter um significado prático.

O Intercept é uma parte essencial da equação de regressão e é uma das informações que a análise de regressão fornece para entender e modelar a relação entre as variáveis independentes e a variável dependente.


Para utilizar os coeficientes da regressão linear e criar uma fórmula para calcular o valor final em R, você pode usar a função `predict()`. Vou mostrar um exemplo passo a passo de como fazer isso:

Suponha que você ajustou um modelo de regressão linear simples com a fórmula `y = a * x + b`, onde `a` é o coeficiente da variável independente `x` e `b` é o Intercept (intercepto).

Aqui está um exemplo de como usar os coeficientes do modelo para calcular o valor final:

```R
# Suponha que você tem os coeficientes do modelo
a <- 2.5  # Coeficiente da variável independente x
b <- 1.0  # Intercept (intercepto)

# Suponha que você tem um valor de x para o qual deseja calcular o valor de y
x <- 3.0

# Crie a fórmula
y <- a * x + b

# Exiba o valor calculado de y
cat("O valor calculado de y é:", y, "\n")
```

Neste exemplo, calculamos o valor final de `y` usando a fórmula `y = a * x + b`, onde `a` é o coeficiente da variável independente `x` e `b` é o Intercept.

Em um cenário de regressão linear múltipla com várias variáveis independentes e seus respectivos coeficientes, você pode aplicar a mesma lógica para calcular o valor final com base nas variáveis independentes específicas que você deseja usar.

No entanto, se você ajustou um modelo de regressão em R usando a função `lm()` e deseja calcular valores previstos para um conjunto de dados, pode usar a função `predict()`. Veja um exemplo:

```R
# Suponha que você ajustou um modelo de regressão linear chamado 'modelo'
# 'novo_data' é um dataframe com as variáveis independentes para as quais você deseja prever os valores de 'y'
previsoes <- predict(modelo, newdata = novo_data)
```

Nesse caso, a função `predict()` usa os coeficientes do modelo para fazer previsões com base nos valores do dataframe `novo_data` e retorna as previsões em um vetor. Certifique-se de ajustar o exemplo de acordo com o seu modelo e dados específicos.



Se você deseja recalcular o valor original sem utilizar a função `predict()`, você pode fazer isso manualmente usando os coeficientes do modelo de regressão linear. Aqui está como você pode realizar o cálculo manualmente:

Suponha que você tenha um modelo de regressão linear simples representado pela fórmula:

\[Y = \beta_0 + \beta_1X\]

- \(Y\) é a variável dependente (a variável que você deseja prever).
- \(\beta_0\) é o Intercept (intercepto).
- \(\beta_1\) é o coeficiente da variável independente \(X\).

Se você deseja calcular o valor original de \(Y\) com base em um valor específico de \(X\), você pode usar a fórmula:

\[Y_{\text{original}} = \beta_0 + \beta_1X_{\text{específico}}\]

Onde:
- \(Y_{\text{original}}\) é o valor original de \(Y\).
- \(X_{\text{específico}}\) é o valor específico de \(X\) para o qual você deseja calcular \(Y_{\text{original}}\).

Aqui está um exemplo em R:

```R
# Suponha que você tenha os coeficientes do modelo
beta_0 <- 1.0  # Intercept (intercepto)
beta_1 <- 2.5  # Coeficiente da variável independente X

# Suponha que você tenha um valor específico de X
X_especifico <- 3.0

# Calcule o valor original de Y
Y_original <- beta_0 + beta_1 * X_especifico

# Exiba o valor original de Y
cat("O valor original de Y é:", Y_original, "\n")
```

Neste exemplo, estamos calculando o valor original de \(Y\) manualmente com base nos coeficientes do modelo e em um valor específico de \(X\). Certifique-se de ajustar os coeficientes e os valores de \(X\) de acordo com o seu próprio modelo e dados.

Se você deseja fazer um exemplo de regressão linear múltipla com 5 variáveis independentes, podemos estender o exemplo anterior. Suponha que você tenha um modelo de regressão linear com 5 variáveis independentes, representado pela seguinte fórmula:

\[Y = \beta_0 + \beta_1X_1 + \beta_2X_2 + \beta_3X_3 + \beta_4X_4 + \beta_5X_5\]

Onde:
- \(Y\) é a variável dependente que você deseja prever.
- \(\beta_0\) é o Intercept (intercepto).
- \(\beta_1, \beta_2, \beta_3, \beta_4,\) e \(\beta_5\) são os coeficientes das variáveis independentes \(X_1, X_2, X_3, X_4,\) e \(X_5\), respectivamente.

Aqui está um exemplo em R de como calcular o valor original de \(Y\) com base em valores específicos das variáveis independentes:

```R
# Suponha que você tenha os coeficientes do modelo
beta_0 <- 1.0  # Intercept (intercepto)
beta_1 <- 2.5  # Coeficiente da variável independente X1
beta_2 <- -0.5 # Coeficiente da variável independente X2
beta_3 <- 1.2  # Coeficiente da variável independente X3
beta_4 <- -0.8 # Coeficiente da variável independente X4
beta_5 <- 0.6  # Coeficiente da variável independente X5

# Suponha que você tenha valores específicos das variáveis independentes
X1_especifico <- 3.0
X2_especifico <- 2.0
X3_especifico <- 1.5
X4_especifico <- 4.0
X5_especifico <- 1.2

# Calcule o valor original de Y
Y_original <- beta_0 + beta_1 * X1_especifico + beta_2 * X2_especifico + beta_3 * X3_especifico + beta_4 * X4_especifico + beta_5 * X5_especifico

# Exiba o valor original de Y
cat("O valor original de Y é:", Y_original, "\n")
```

Neste exemplo, estamos calculando o valor original de \(Y\) com base nos coeficientes do modelo e em valores específicos das 5 variáveis independentes (\(X_1, X_2, X_3, X_4,\) e \(X_5\)). Certifique-se de ajustar os coeficientes e os valores das variáveis independentes de acordo com o seu próprio modelo e dados.



Os coeficientes \(\beta\) em um modelo de regressão linear são estimados durante o ajuste do modelo. Os coeficientes representam as relações entre as variáveis independentes e a variável dependente. O objetivo da regressão linear é encontrar os valores de \(\beta\) que melhor se ajustem aos seus dados. Você pode calcular os coeficientes \(\beta\) usando métodos de ajuste, como o método dos mínimos quadrados.

Em R, você pode calcular os coeficientes \(\beta\) de um modelo de regressão linear usando a função `lm()` para ajustar o modelo aos seus dados. Aqui está um exemplo de como fazer isso:

Suponha que você tenha um dataframe chamado `dados` com uma variável dependente `Y` e cinco variáveis independentes `X1`, `X2`, `X3`, `X4`, e `X5`.

```R
# Ajuste um modelo de regressão linear
modelo <- lm(Y ~ X1 + X2 + X3 + X4 + X5, data = dados)

# Exiba os coeficientes beta
coeficientes_beta <- coef(modelo)
print(coeficientes_beta)
```

No exemplo acima, `lm(Y ~ X1 + X2 + X3 + X4 + X5, data = dados)` ajusta um modelo de regressão linear com a variável dependente `Y` e cinco variáveis independentes `X1`, `X2`, `X3`, `X4`, e `X5`. Os coeficientes beta serão estimados pelo modelo e podem ser acessados usando a função `coef()`. Os coeficientes serão armazenados em `coeficientes_beta`.

Os valores de `coeficientes_beta` representarão os valores estimados dos coeficientes \(\beta\) que relacionam cada variável independente à variável dependente no seu modelo de regressão linear.

Lembre-se de que os coeficientes \(\beta\) representam as inclinações da reta de regressão e indicam como a variável dependente muda em resposta a mudanças nas variáveis independentes. Eles são estimados para melhor se ajustar aos seus dados com base no método dos mínimos quadrados.

-->